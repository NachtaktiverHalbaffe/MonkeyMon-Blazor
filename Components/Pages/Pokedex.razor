@page "/pokedex"
@using Microsoft.EntityFrameworkCore
@using MonkeyMon_Blazor.Infrastructure
@using MonkeyMon_Blazor.Infrastructure.Algorithms
@using MonkeyMon_Blazor.Models
@inject ApplicationDbContext dbContext

<PageTitle>Pokedex</PageTitle>
<h2>Pokedex</h2>

@if (Pokemons is null)
{
    <MudProgressCircular Indeterminate="true"/>
}
else
{
    <MudCarousel ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="Pokemon" Style="height: 100rem">
        @foreach (var pokemon in Pokemons)
        {
            <MudCarouselItem Transition="Transition.Slide">
                <div style="height: 100%">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@pokemon.Name.Capitalize()</MudText>
                                @foreach (var type in pokemon.Types)
                                {
                                    <MudChip Class="d-inline-flex" T="string" Color="Color.Dark" Style="@($"background-color: {GetTypeColor(type.Name)}")" Size="Size.Small">
                                        <AvatarContent>
                                            <MudAvatar Color="Color.Transparent">
                                                <MudImage Src="@($"{type.Name}.png")" ObjectFit="ObjectFit.ScaleDown" Class="pa-2"/>
                                            </MudAvatar>
                                        </AvatarContent>
                                        <ChildContent>@type.Name.Capitalize()</ChildContent>
                                    </MudChip>
                                }
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (pokemon.Sprite?.FrontDefault is not null)
                            {
                                <img src="@pokemon.Sprite.FrontDefault" width="100" ObjectFit="ObjectFit.Contain" alt="Image of pokemon"/>
                            }
                            <MudText Class="pb-4" Typo="Typo.body1">@pokemon.Description</MudText>

                            <div class="py-2 d-flex flex-column">
                                <MudText Class="d-inline-flex" Typo="Typo.body1">HP: @pokemon.HealthPoints</MudText>
                                <div class="d-inline-flex flex-row">
                                    <MudProgressLinear Class="d-inline-flex" Rounded="true" Value="@((int)(pokemon.HealthPoints ?? 0))" Min="0" Max="714"/>
                                </div>
                            </div>
                            <div class="py-2">
                                <MudText Class="d-inline-flex" Typo="Typo.body1">Angriff: @pokemon.Attack</MudText>
                                <MudProgressLinear Rounded="true" Value="@((int)(pokemon.Attack ?? 0))" Min="0" Max="723"/>
                            </div>
                            <div class="py-2">
                                <MudText Class="d-inline-flex" Typo="Typo.body1">Verteidigung: @pokemon.Defense</MudText>
                                <MudProgressLinear Rounded="true" Value="@((int)(pokemon.Defense ?? 0))" Min="0" Max="654"/>
                            </div>
                            <div class="py-2">
                                <MudText Class="d-inline-flex" Typo="Typo.body1">Sp. Angriff: @pokemon.SpecialAttack</MudText>
                                <MudProgressLinear Rounded="true" Value="@((int)(pokemon.SpecialAttack ?? 0))" Min="0" Max="624"/>
                            </div>
                            <div class="py-2">
                                <MudText Class="d-inline-flex" Typo="Typo.body1">Sp. Verteidigung: @pokemon.SpecialDefense</MudText>
                                <MudProgressLinear Rounded="true" Value="@((int)(pokemon.SpecialDefense ?? 0))" Min="0" Max="654"/>
                            </div>
                            <div class="py-2">
                                <MudText Class="d-inline-flex" Typo="Typo.body1">Initiative: @pokemon.Speed</MudText>
                                <MudProgressLinear Rounded="true" Value="@((int)(pokemon.Speed ?? 0))" Min="0" Max="854"/>
                            </div>
                            
                            <MudText Class="mt-4" Typo="Typo.body1">Angriffe</MudText>
                            
                            <MudDataGrid T="MonMove" Items="@pokemon.Moves">
                                <Columns>
                                    <PropertyColumn Property="mm=>mm.Name.Capitalize()" Title="Name"/>
                                    <PropertyColumn Property="mm => mm.Power" Title="Schaden"/>
                                    <PropertyColumn Property="mm => mm.DamageClass.Capitalize()" Title="Schadensklasse"/>
                                    <PropertyColumn Property="mm => mm.Type.Name.Capitalize()" Title="Typ"/>
                                    <PropertyColumn Property="mm => mm.Accuracy" Title="Genauigkeit"/>
                                    <PropertyColumn Property="mm => mm.Pp" Title="PP"/>
                                    <PropertyColumn Property="mm => mm.Priority" Title="Priorität"/>
                                </Columns>

                                <PagerContent>
                                    <MudDataGridPager T="MonMove" />
                                </PagerContent>
                            </MudDataGrid>
                            
                        </MudCardContent>
                    </MudCard>
                </div>

            </MudCarouselItem>
        }
    </MudCarousel>
}


@code {
    private IReadOnlyList<Pokemon>? Pokemons;

    protected override async Task OnInitializedAsync()
    {
        Pokemons = await dbContext.Pokemons
            .AsNoTracking()
            .Include(p => p.Types)
            .ThenInclude(t => t.MonTypeRelation)
            .Include(t => t.Sprite)
            .Include(p => p.Moves)
            .ThenInclude(mm => mm.Type)
            .ToListAsync();

        await base.OnInitializedAsync();
    }

    private string GetTypeColor(string type)
    {
        return type switch
        {
            "normal" => "#FFA7A877",
            "fire" => "rgba(29, 255, 250, 62)",
            "water" => "FF777BDFE",
            "grass" => "rgba(8, 216, 60, 255)",
            "electric" => "rgba(244, 255, 231, 255)",
            "ice" => "#99D7D8",
            "fighting" => "#C03128",
            "poison" => "#9F419F",
            "ground" => "#E1C068",
            "flying" => "#A890F0",
            "psychic" => "#F95887",
            "bug" => "#A8B91F",
            "rock" => "#B8A038",
            "ghost" => "#705998",
            "dark" => "#6F5848",
            "dragon" => "#7138F8",
            "steel" => "#B8B8D0",
            "fairy" => "#A890F0",
            _ => "#000000"
        };
    }

}